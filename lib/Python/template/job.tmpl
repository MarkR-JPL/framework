#!/bin/bash

# Things that vary from one run to the next
{0.variable_exports}
export l2_binary_filename={0.l2_binary_filename}
export l2_config_filename={0.l2_config_filename}
export processing_dir={0.processing_dir}
export log_directory={0.log_directory}
export sounding_id_list_filename={0.sounding_id_list_filename}
export output_directory={0.output_directory}
export group_size={0.group_size}
export PYTHONPATH={0.python_path}
export PATH={0.bin_path}
export LD_LIBRARY_PATH={0.lib_path}
export LUA_PATH="{0.l2_lua_path}"
if [[ "{0.abscodir}" != "/groups/algorithm/l2_fp/absco" ]]; then
    # Only do this if not the default location. This is because it
    # interfers with the logic of the search for a local copy of the
    # absco file on torque
    export abscodir={0.abscodir}
fi
export merradir={0.merradir}
{0.addl_var_list_def}

# The rest of this should not need to be changed.
cd ${{processing_dir}}
id_list=( `cat ${{sounding_id_list_filename}}` )

keep_exit="no"
print_help="no"
force_quiet="no"
while getopts :ehqa:m: opt; do
  case $opt in
    a)
      export abscodir=$OPTARG
      ;;
    m)
      export merradir=$OPTARG
      ;;
    e)
      keep_exit="yes"
      ;;
    q)
      force_quiet="yes"
      ;;
    h | \?)
      print_help="yes"
      ;;
  esac
done
shift $((OPTIND-1))
if [[ ! -z "${{{0.array_idx_var_name}}}" ]]; then
   job_index=${{{0.array_idx_var_name}}}
   do_tee="no"
else
   if [[ $# -lt 1 ]]; then
     print_help="yes"
   else
     job_index=$1
     do_tee="yes"
   fi
fi

if [ "$print_help" = "yes" ]; then
cat <<EOF
Usage: $0 [options] [<job_index>]"

Need to supply job array index, or pass in as {0.array_idx_var_name}

   -h  Print help
   -a abscodir 
       Supply absco directory to use, rather than one set when
       script 
   -a merradir 
       Supply merra directory to use, rather than one set when
       script 
   -e  Keep exit code from l2 code
   -q  Don't write output to stdout, even if we aren't in PBS
EOF
  exit 1
fi

if [ "$force_quiet" = "yes" ]; then
   do_tee="no"
fi
export do_tee

{0.addl_var_run_export}

# Break up log and output directories so they don't get too big. Just
# use the job index padded with 0's for this. Skip if we aren't grouping
# data into large enough groups - we don't want directories with a single
# file in them.
if [ $group_size -gt 9 ]; then
    log_directory=${{log_directory}}/$(printf "%04d" $job_index)
    output_directory=${{output_directory}}/$(printf "%04d" $job_index)
fi
mkdir -p ${{log_directory}}
mkdir -p ${{output_directory}}

run_job_index() {{
    id_index=$1
    id_list=( `cat ${{sounding_id_list_filename}}` )
    export sounding_id="${{id_list[${{id_index}}]}}"

    if [ ! -z "$input_file_mapping" ] && [ -e "$input_file_mapping" ]; then
        # If there is an input file mapping, then extract declarations of filenames from it
        # Expected format is 1 line per sounding id: 
        # Sounding id with space seperating it from key=value pairs seperated by semicolons, ie:
        # <sounding_id> inp_file1=/path/to/file1;inp_file2=/path/to/file2
        # The keywords names are evaluated as variables so they should match the expected enviromental variable names
        # used by this script.
        file_decls=$(grep ^$sounding_id $input_file_mapping | sed "s/^$sounding_id //" | tr ';' '\n' | sed 's/^/export /g')
        eval $file_decls
    fi
    
    # The mac doesn't have the same options in the time command as on linux
    if test ! -z "`uname | grep Darwin`"
    then
       time_command="/usr/bin/time"
    else
       time_command="/usr/bin/time -v -o ${{log_directory}}/runtime_${{sounding_id}}.txt"
    fi
    if test -e ${{output_directory}}/l2_${{sounding_id}}.h5; then
       echo "Skipping ${{sounding_id}} because output file already exists"
    else
       if [ "$do_tee" = "yes" ]; then
           ($time_command ${{l2_binary_filename}} ${{l2_config_filename}} ${{output_directory}}/l2_${{sounding_id}}.h5) 2>&1 | tee ${{log_directory}}/l2_${{sounding_id}}.log.running
           l2_run_status=${{PIPESTATUS[0]}}
       else
           ($time_command  ${{l2_binary_filename}} ${{l2_config_filename}} ${{output_directory}}/l2_${{sounding_id}}.h5) > ${{log_directory}}/l2_${{sounding_id}}.log.running 2>&1
           # In torque, the fact that this ran to complete is "success", even
           # if sounding failed.
           l2_run_status=$?
       fi
       mv -f ${{log_directory}}/l2_${{sounding_id}}.log.running ${{log_directory}}/l2_${{sounding_id}}.log
    fi
}}
export -f run_job_index

beg_id_index=$(expr ${{job_index}} '*' ${{group_size}})
end_id_index=$(expr ${{beg_id_index}} '+' ${{group_size}} '-' 1)
if [ ${{end_id_index}} -gt ${{#id_list[@]}} ]; then
    end_id_index=$(expr ${{#id_list[@]}} - 1)
fi

seq ${{beg_id_index}} ${{end_id_index}} | parallel --gnu -j {0.parallel_size} --ungroup --env run_job_index 'run_job_index {{}}'

# Aggregate the soundings together, if we have enough to be worth doing this
if [ $group_size -gt 9 ]; then
    input_files_tmp=$(mktemp)
    find ${{output_directory}} -name "*.h5" > $input_files_tmp
    {0.l2_support_path}/utils/splice_product_files.py --single-file-type -o ${{output_directory}}/l2_aggregate.h5 -i $input_files_tmp -l ${{log_directory}}/l2_aggregate.log
    rm $input_files_tmp
fi

if [ "$keep_exit" = "yes" ]; then
   exit ${{l2_run_status}}
fi
